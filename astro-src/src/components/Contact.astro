---
import { type Language, useTranslations } from '../i18n/utils';

interface Props {
  lang: Language;
}

const { lang } = Astro.props;
const t = useTranslations(lang);
---

<section class="contact section-padding" id="contact">
  <div class="container">
    <div class="section-header">
      <h2 class="section-title">{t('contact.title')}</h2>
      <p class="section-subtitle">{t('contact.subtitle')}</p>
    </div>

    <div class="contact-wrapper">
      <div class="contact-info">
        <h3>{t('contact.info_title')}</h3>
        <p>{t('contact.info_description')}</p>

        <div class="contact-methods">
          <div class="contact-method">
            <div class="method-icon">
              <i class="fas fa-envelope"></i>
            </div>
            <div class="method-content">
              <h4>{t('contact.email')}</h4>
              <a href="mailto:me@eflury.com">me@eflury.com</a>
            </div>
          </div>

          <div class="contact-method">
            <div class="method-icon">
              <i class="fas fa-phone"></i>
            </div>
            <div class="method-content">
              <h4>{t('contact.phone')}</h4>
              <a href="tel:+41799107787">+41 79 910 77 87</a>
            </div>
          </div>

          <div class="contact-method">
            <div class="method-icon">
              <i class="fas fa-map-marker-alt"></i>
            </div>
            <div class="method-content">
              <h4>{t('contact.location')}</h4>
              <p>Grenchen, Switzerland</p>
            </div>
          </div>
        </div>
      </div>

      <form class="contact-form" id="contactForm">
        <div class="form-group">
          <label for="name">{t('contact.form.name')}</label>
          <input type="text" id="name" name="name" required />
        </div>

        <div class="form-group">
          <label for="email">{t('contact.form.email')}</label>
          <input type="email" id="email" name="email" required />
        </div>

        <div class="form-group">
          <label for="subject">{t('contact.form.subject')}</label>
          <input type="text" id="subject" name="subject" required />
        </div>

        <div class="form-group">
          <label for="message">{t('contact.form.message')}</label>
          <textarea id="message" name="message" rows="5" required></textarea>
        </div>

        <button type="submit" class="btn btn-primary">
          {t('contact.form.submit')}
          <i class="fas fa-paper-plane"></i>
        </button>

        <div id="formStatus" class="form-status"></div>
      </form>
    </div>
  </div>
</section>

<style>
  .contact {
    background: var(--bg-secondary);
  }

  .section-header {
    text-align: center;
    margin-bottom: 4rem;
  }

  .section-title {
    font-size: clamp(2rem, 4vw, 3rem);
    font-weight: 800;
    color: var(--text-primary);
    margin-bottom: 1rem;
  }

  .section-subtitle {
    font-size: clamp(1rem, 2vw, 1.2rem);
    color: var(--text-secondary);
    max-width: 600px;
    margin: 0 auto;
  }

  .contact-wrapper {
    display: grid;
    grid-template-columns: 1fr 1.5fr;
    gap: 3rem;
    max-width: 1000px;
    margin: 0 auto;
  }

  .contact-info h3 {
    font-size: 1.8rem;
    color: var(--text-primary);
    margin-bottom: 1rem;
  }

  .contact-info p {
    color: var(--text-secondary);
    line-height: 1.6;
    margin-bottom: 2rem;
  }

  .contact-methods {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .contact-method {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
  }

  .method-icon {
    width: 50px;
    height: 50px;
    border-radius: 12px;
    background: var(--gradient-primary);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 1.2rem;
    flex-shrink: 0;
  }

  .method-content h4 {
    font-size: 1rem;
    color: var(--text-primary);
    margin-bottom: 0.25rem;
  }

  .method-content a {
    color: var(--primary-green);
    text-decoration: none;
    transition: var(--transition-smooth);
  }

  .method-content a:hover {
    text-decoration: underline;
  }

  .method-content p {
    margin: 0;
    color: var(--text-secondary);
  }

  .contact-form {
    background: var(--card-bg);
    padding: 2.5rem;
    border-radius: 16px;
    border: 1px solid rgba(0, 122, 77, 0.1);
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-group label {
    display: block;
    font-weight: 600;
    color: var(--text-primary);
    margin-bottom: 0.5rem;
  }

  .form-group input,
  .form-group textarea {
    width: 100%;
    padding: 0.875rem 1rem;
    border: 1px solid rgba(0, 122, 77, 0.2);
    border-radius: 8px;
    background: var(--bg-primary);
    color: var(--text-primary);
    font-family: inherit;
    font-size: 1rem;
    transition: var(--transition-smooth);
  }

  .form-group input:focus,
  .form-group textarea:focus {
    outline: none;
    border-color: var(--primary-green);
    box-shadow: 0 0 0 3px rgba(0, 122, 77, 0.1);
  }

  .btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem 2rem;
    border-radius: 8px;
    font-weight: 600;
    text-decoration: none;
    transition: var(--transition-smooth);
    cursor: pointer;
    border: none;
    font-size: 1rem;
    width: 100%;
    justify-content: center;
  }

  .btn-primary {
    background: var(--gradient-primary);
    color: white;
    box-shadow: var(--shadow-soft);
  }

  .btn-primary:hover {
    transform: translateY(-3px);
    box-shadow: var(--shadow-medium);
  }

  .form-status {
    margin-top: 1rem;
    padding: 1rem;
    border-radius: 8px;
    display: none;
    text-align: center;
    font-weight: 500;
  }

  .form-status.success {
    display: block;
    background: rgba(0, 199, 126, 0.1);
    color: var(--primary-green);
    border: 1px solid var(--primary-green);
  }

  .form-status.error {
    display: block;
    background: rgba(224, 60, 49, 0.1);
    color: var(--primary-red);
    border: 1px solid var(--primary-red);
  }

  @media (max-width: 768px) {
    .contact-wrapper {
      grid-template-columns: 1fr;
      gap: 2rem;
    }

    .contact-form {
      padding: 1.5rem;
    }
  }
</style>

<script>
  import emailjs from '@emailjs/browser';

  // Initialize EmailJS with your public key
  emailjs.init('t1Qe1Zg5U3m8sqLGE');

  const form = document.getElementById('contactForm') as HTMLFormElement;
  const formStatus = document.getElementById('formStatus') as HTMLDivElement;

  if (form) {
    form.addEventListener('submit', async (e) => {
      e.preventDefault();

      const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
      submitButton.disabled = true;
      submitButton.textContent = 'Sending...';

      try {
        await emailjs.sendForm(
          'service_7o5qkdh',  // Service ID
          'template_yw4ehjl', // Template ID
          form
        );

        formStatus.className = 'form-status success';
        formStatus.textContent = 'Message sent successfully! I\'ll get back to you soon.';
        form.reset();

        // Track conversion
        if (window.trackEvent) {
          window.trackEvent('Conversion', 'contact_form_submit', 'Contact Form');
        }
      } catch (error) {
        formStatus.className = 'form-status error';
        formStatus.textContent = 'Failed to send message. Please try again or email me directly.';
        console.error('EmailJS Error:', error);
      } finally {
        submitButton.disabled = false;
        submitButton.innerHTML = 'Send Message <i class="fas fa-paper-plane"></i>';
      }
    });
  }
</script>
